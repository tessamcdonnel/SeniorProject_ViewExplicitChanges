library(readxl) # to read in Excel files
library(data.table) # need this package for the 'reshape' function
library(ggplot2)

load(url("http://www.rossmanchance.com/iscam3/ISCAM.RData")) # btw love this Dr. Chance, I use it all the time now


HepB <- read.csv("/Users/tessamcdonnel/KINE_Video_Senior_Project/hep_data.csv")
dim(HepB)
length(unique(HepB$ResponseId))
    
# I don't think I ended up using these packages but I was trying to transpose the data 
library(tidyr)
library(dplyr)

# I ordered the data by subject so I could easily compare the original data to my cleaned version
# (these are new functions to me and I wanted to check and make sure the values were correct)
HepB<- HepB[order(HepB$ResponseId),]
HepB <- as.data.frame(HepB)

# I'm referring to the 8 'groups' with Condition being the first number followed by .IndiviActorRateal video
# Here I am creating variables that contain the average of the 3 rating scores from each person from each video. 
# There will be a lot of NA's here (Everyone is either Condition 1,2,3,4)

HepB$Rate_1.1 <- (HepB$justBYou_videorating_1+HepB$justBYou_videorating_2+HepB$justBYou_videorating_3)/3

HepB$Rate_1.2<- (HepB$JustBAdovcate_Rating_1+HepB$JustBAdovcate_Rating_2+HepB$JustBAdovcate_Rating_3)/3

HepB$Rate_2.1 <- (HepB$Proactive_ratings_1 + HepB$Proactive_ratings_2 + HepB$Proactive_ratings_3)/3

HepB$Rate_2.2 <- (HepB$Espi_ratings_1+HepB$Espi_ratings_2+HepB$Espi_ratings_3)/3

HepB$Rate_3.1 <- (HepB$Family_ratings_1+HepB$Family_ratings_2+HepB$Family_ratings_3)/3

HepB$Rate_3.2 <- (HepB$Dai_ratings_1+HepB$Dai_ratings_2+HepB$Dai_ratings_3)/3

HepB$Rate_4.1 <- (HepB$WhatHepB_ratings_1+HepB$WhatHepB_ratings_2+HepB$WhatHepB_ratings_3)/3

HepB$Rate_4.2 <- (HepB$Prevent_ratings_1+HepB$Prevent_ratings_2+HepB$Prevent_ratings_3)/3




##################



# Averaging Person/actor rating
HepB$person_1.1 <- (HepB$justBYou_personratin_1 + HepB$justBYou_personratin_2 + HepB$justBYou_personratin_3 + 
                      HepB$justBYou_personratin_4 + HepB$justBYou_personratin_5 + HepB$justBYou_personratin_6 +
                      HepB$justBYou_personratin_7)/7

HepB$person_1.2 <- (HepB$JustBAdvocacte_perso_1 + HepB$JustBAdvocacte_perso_2 + HepB$JustBAdvocacte_perso_3 + HepB$JustBAdvocacte_perso_4
                + HepB$JustBAdvocacte_perso_5 + HepB$JustBAdvocacte_perso_6 + HepB$JustBAdvocacte_perso_7)/7


HepB$person_2.1 <- (HepB$Proactive_person_1 + HepB$Proactive_person_2 + HepB$Proactive_person_3 + 
                      HepB$Proactive_person_4 + HepB$Proactive_person_5 + HepB$Proactive_person_6 +
                      HepB$Proactive_person_7)/7

HepB$person_2.2 <- (HepB$Espi_person_1 + HepB$Espi_person_2 + HepB$Espi_person_3 + HepB$Espi_person_4
                    + HepB$Espi_person_5 + HepB$Espi_person_6 + HepB$Espi_person_7)/7

HepB$person_3.1 <- (HepB$Family_person_1 + HepB$Family_person_2 + HepB$Family_person_3 + 
                      HepB$Family_person_4 + HepB$Family_person_5 + HepB$Family_person_6 +
                      HepB$Family_person_7)/7

HepB$person_3.2 <- (HepB$Dai_person_1 + HepB$Dai_person_2 + HepB$Dai_person_3 + HepB$Dai_person_4
                    + HepB$Dai_person_5 + HepB$Dai_person_6 + HepB$Dai_person_7)/7

HepB$person_4.1 <- (HepB$WhatHepB_person_1 + HepB$WhatHepB_person_2 + HepB$WhatHepB_person_3 + 
                      HepB$WhatHepB_person_4 + HepB$WhatHepB_person_5 + HepB$WhatHepB_person_6 +
                      HepB$WhatHepB_person_7)/7

HepB$person_4.2 <- (HepB$Prevent_person_1 + HepB$Prevent_person_2 + HepB$Prevent_person_3 + HepB$Prevent_person_4
                    + HepB$Prevent_person_5 + HepB$Prevent_person_6 + HepB$Prevent_person_7)/7



##################




HepB$PE_1.1 <- (HepB$justBYou_PE_1 + HepB$justBYou_PE_2 + HepB$justBYou_PE_3 + HepB$justBYou_PE_4 + HepB$justBYou_PE_5
                 + HepB$justBYou_PE_6 + HepB$justBYou_PE_7 + HepB$justBYou_PE_8 + HepB$justBYou_PE_9 + HepB$justBYou_PE_10)/10

HepB$PE_1.2 <- (HepB$JustBadvocate_PE_1 + HepB$JustBadvocate_PE_2 + HepB$JustBadvocate_PE_3 + HepB$JustBadvocate_PE_4
                 + HepB$JustBadvocate_PE_5 + HepB$JustBadvocate_PE_6 + HepB$JustBadvocate_PE_7 + HepB$JustBadvocate_PE_8 
                 + HepB$JustBadvocate_PE_9 + HepB$JustBadvocate_PE_10)/10

HepB$PE_2.1 <- (HepB$Proactive_PE_1 + HepB$Proactive_PE_2 + HepB$Proactive_PE_3 + HepB$Proactive_PE_4
                 + HepB$Proactive_PE_5 + HepB$Proactive_PE_6 + HepB$Proactive_PE_7 + HepB$Proactive_PE_8 
                 + HepB$Proactive_PE_9 + HepB$Proactive_PE_10)/10

HepB$PE_2.2 <- (HepB$Espi_PE_1 + HepB$Espi_PE_2 + HepB$Espi_PE_3 + HepB$Espi_PE_4 + HepB$Espi_PE_5
                 + HepB$Espi_PE_6 + HepB$Espi_PE_7 + HepB$Espi_PE_8 + HepB$Espi_PE_9 + HepB$Espi_PE_10)/10

HepB$PE_3.1 <- (HepB$Family_PE_1 + HepB$Family_PE_2 + HepB$Family_PE_3 + HepB$Family_PE_4
                 + HepB$Family_PE_5 + HepB$Family_PE_6 + HepB$Family_PE_7 + HepB$Family_PE_8 
                 + HepB$Family_PE_9 + HepB$Family_PE_10)/10

HepB$PE_3.2 <- (HepB$Dai_PE_1 + HepB$Dai_PE_2 + HepB$Dai_PE_3 + HepB$Dai_PE_4 + HepB$Dai_PE_5
                 + HepB$Dai_PE_6 + HepB$Dai_PE_7 + HepB$Dai_PE_8 + HepB$Dai_PE_9 + HepB$Dai_PE_10)/10

HepB$PE_4.1 <- (HepB$WhatHepB_PE_1 + HepB$WhatHepB_PE_2 + HepB$WhatHepB_PE_3 + HepB$WhatHepB_PE_4
                 + HepB$WhatHepB_PE_5 + HepB$WhatHepB_PE_6 + HepB$WhatHepB_PE_7 + HepB$WhatHepB_PE_8 
                 + HepB$WhatHepB_PE_9 + HepB$WhatHepB_PE_10)/10

HepB$PE_4.2 <- (HepB$Prevent_PE_1 + HepB$Prevent_PE_2 + HepB$Prevent_PE_3 + HepB$Prevent_PE_4 + HepB$Prevent_PE_5
                 + HepB$Prevent_PE_6 + HepB$Prevent_PE_7 + HepB$Prevent_PE_8 + HepB$Prevent_PE_9 + HepB$Prevent_PE_10)/10


############


HepB$PerSuscep <- (HepB$PerSuscep_1+HepB$PerSuscep_2 + HepB$PerSuscep_3 + HepB$PerSuscep_4 + HepB$PerSuscep_6)/5

HepB$PerSever <- (HepB$PerSever_1 + HepB$PerSever_2 + HepB$PerSever_3 + HepB$PerSever_4)/4

HepB$PerBene <- (HepB$PerBene_1+HepB$PerBene_2 + HepB$PerBene_3 + HepB$PerBene_4 + HepB$PerBene_5 + HepB$PerBene_6)/6

HepB$PerBarr <- (HepB$PerBarr_1+HepB$PerBarr_2 + HepB$PerBarr_3 + HepB$PerBarr_4 + HepB$PerBarr_5 + HepB$PerBarr_6 + HepB$PerBarr_7)/7

HepB$stigma <- (HepB$Stigma_1+HepB$Stigma_2 + HepB$Stigma_3 + HepB$Stigma_4 + HepB$Stigma_5 + HepB$Stigma_6)/6

HepB$Relationships_P <- (HepB$Relationships_Now_1 + HepB$Relationships_Now_2)/2

HepB$Relationships_GP <- (HepB$Relationships_Now_3 + HepB$Relationships_Now_4 + HepB$Relationships_Now_5 + HepB$Relationships_Now_6)/4

# This code is transposing the data file
# Since there are repeated measures (each person sees 2 videos), I added an additional row for every subject that reflects the indiviActorRateal video
clean <- reshape(HepB, idvar = "ResponseId", varying = list(c("Rate_1.1", "Rate_1.2", "Rate_2.1", "Rate_2.2", "Rate_3.1", 
            "Rate_3.2", "Rate_4.1", "Rate_4.2"), c("person_1.1", "person_1.2", "person_2.1", "person_2.2", "person_3.1", "person_3.2", 
              "person_4.1", "person_4.2"), c("PE_1.1", "PE_1.2", "PE_2.1", "PE_2.2", "PE_3.1", "PE_3.2", "PE_4.1", "PE_4.2")),
                 direction = "long", sep = "_", v.names = c("RateVid", "ActorRate", "PEtotal"),
                 timevar = "Video", times = paste(c("Video1.1","Video1.2", "Video2.1", "Video2.2", "Video3.1", "Video3.2", "Video4.1", "Video4.2")))


dim(clean) # at this point there are 4,800 rows because every subject is represented in 8 rows, 300 subjects * 8 possible treatments
clean= clean[!is.na(clean$RateVid),] # deletes rows that aren't applicable, now each subject is in 2 rows
clean <- clean[order(clean$ResponseId),]
clean$Sex <- as.character(clean$Sex)
dim(clean) # now there are 2 rows for each person (n = 1200)
# Created a variable that easily groups the subjects into one of the 4 Conditions
condition = NULL
for (i in 1:length(clean$Video)){
  if ( (clean$Video[i] == "Video1.1") | (clean$Video[i] == "Video1.2") )  {
    clean$condition[i] = "Group1"
  }
  else if ( (clean$Video[i] == "Video2.1") | (clean$Video[i] == "Video2.2") ) {
    clean$condition[i] = "Group2"
  }
  else if ( (clean$Video[i] == "Video3.1") | (clean$Video[i] == "Video3.2") ) {
    clean$condition[i] = "Group3"
  }
  else if ( (clean$Video[i] == "Video4.1") | (clean$Video[i] == "Video4.2") ) {
    clean$condition[i] = "Group4"
  }
}


# clean$Born = recode(clean$Born, "1 = 23")

# clean$Born = recode(clean$Born, "c(5, 25) = 1")

# clean$Born = recode(clean$Born, "6:26 = 2")


for (i in 1:length(clean$Finances)){
  if ( (clean$Finances[i] == 2) | (clean$Finances[i] == 3) )  {
    clean$Finances[i] = 2
  }
  
}  


for (i in 1:length(clean$School)){
  if ( (clean$School[i] == 1) | (clean$School[i] == 2) | (clean$School[i] == 3) | (clean$School[i] == 4) )  {
    clean$School[i] = 1
  }
  else if ( (clean$School[i] == 5) | (clean$School[i] == 6) )  {
    clean$School[i] = 2
  }
}  
  
for (i in 1:length(clean$Marital)){
  if ( (clean$Marital[i] == 3) | (clean$Marital[i] == 4) | (clean$Marital[i] == 5) | (clean$Marital[i] == 6) )  {
    clean$Marital[i] = 2
  }
  else if ( (clean$Marital[i] == 1) | (clean$Marital[i] == 2) )  {
    clean$Marital[i] = 1
  }
}  

#for (i in 1:length(clean$Born)){
#  if ((clean$Born[i] == 5) | (clean$Born[i] == 25)) {
#    clean$Born[i] = 2
#  } else {
#    clean$Born[i] = 1
#  }
#}  


for (i in 1:length(clean$Relative_HBV)){
  if ( (clean$Relative_HBV[i] == 2) | (clean$Relative_HBV[i] == 3) )  {
    clean$Relative_HBV[i] = 2
  }
}  

for (i in 1:length(clean$Relative_HCC)){
  if ( (clean$Relative_HCC[i] == 2) | (clean$Relative_HCC[i] == 3) )  {
    clean$Relative_HCC[i] = 2
  }
}  


for (i in 1:length(clean$Vaccine)){
  if ( (clean$Vaccine[i] == 2) | (clean$Vaccine[i] == 3) )  {
    clean$Vaccine[i] = 2
  }
}

for (i in 1:length(clean$Bloodtest)){
  if ( (clean$Bloodtest[i] == 2) | (clean$Bloodtest[i] == 3) )  {
    clean$Bloodtest[i] = 2
  }
}

for (i in 1:length(clean$DocRecom)){
  if ( (clean$DocRecom[i] == 2) | (clean$DocRecom[i] == 3) )  {
    clean$DocRecom[i] = 2
  }
}

for (i in 1:length(clean$UsualCare)){
  if ((clean$UsualCare[i] == 2) | (clean$UsualCare[i] == 3)) {
    clean$UsualCare[i] = 1
  } else {
    clean$UsualCare[i] = 2
  }
} 

# creat csv file for recoded 'clean' data 
write.csv(clean, "clean_data.csv")

# splitting 'clean' data (with 2 rows for each person) into: Video 1 data, Video 2 data
first <- clean[seq(1, nrow(clean), 2),]
second <- clean[seq(2, nrow(clean), 2),]

# creat csv files of these data sets
write.csv(first, "first_Video_data.csv")
write.csv(second, "second_Video_data.csv")

## code to make Intention_1 categorical -- to use logistic regression
# for (i in 1:length(first$Intention_1)){
#  if ( (first$Intention_1[i] == 1) | (first$Intention_1[i] == 2) | (first$Intention_1[i] == 3) )  {
#    first$Intention_1[i] = 0
#  }
#  else if ( (first$Intention_1[i] == 4) | (first$Intention_1[i] == 5) )  {
#    first$Intention_1[i] = 1
#  }
#}




##### adding variables that average VidRate, ActorRate, and PE across both videos
total <- read.csv("~/Dropbox/Tessa_KINE_SProject/total_data.csv")
total$OverallRateVid <- (total$RateVid_1 + total$RateVid_2)/2
total$OverallActorRate <- (total$ActorRate_Vid1 + total$ActorRate_Vid2)/2
total$OverallPE <- (total$PEtotal_vid1 + total$PEtotal_vid2)/2

total$Sex <- as.character(total$Sex)



#### Intention Stuff

inten_data_1 <- total[total$Bloodtest != 1 & total$Vaccine != 1,] # get rid these obs - this makes a huge difference in anova results
dim(inten_data_1)
table(inten_data_1$Bloodtest)

## Intention1 by Condition - ANOVA
iscamsummary(inten_data_1$Intention_1, inten_data_1$condition)
boxplot(inten_data_1$Intention_1~inten_data_1$condition)
m3 <- aov(Intention_1~condition, data=inten_data_1)
m3
summary(m3) # not sig when taking out blood=1 and vaccine=1 (p < 0.01 with all 600)

## intention_1 including other predictors
# Full model -- not including interactions though
model_full = lm(inten_data_1$Intention_1~inten_data_1$condition+inten_data_1$Age+inten_data_1$Sex+inten_data_1$BornUS+inten_data_1$Engl+inten_data_1$Marital+inten_data_1$School)
summary(model_full) # nothing is sig but marital status and group2 condition
# model without most insignificant vars
model_red1 = lm(inten_data_1$Intention_1~inten_data_1$condition+inten_data_1$Engl+inten_data_1$Marital)
summary(model_red1) # marital status and English are sig. Group 2 significantly higher



## Intention_2 by Condition - ANOVA
iscamsummary(inten_data_1$Intention_2, inten_data_1$condition)
boxplot(inten_data_1$Intention_2~inten_data_1$condition)
m4 <- aov(Intention_2~condition, data=inten_data_1)
m4
summary(m4) # not sig when taking out blood=1 and vaccine=1 (p < 0.05 with all 600)
## intention_2 including other predictors
# Full model 2 -- not including interactions though
model_full2 = lm(inten_data_1$Intention_2~inten_data_1$condition+inten_data_1$Age+inten_data_1$Sex+inten_data_1$BornUS+inten_data_1$Engl+inten_data_1$Marital+inten_data_1$School)
summary(model_full2) # groups, age, bornUS, engl, marital and school sig
# model without most insignificant vars
model_red2 = lm(inten_data_1$Intention_2~inten_data_1$condition+inten_data_1$Age+inten_data_1$Engl+inten_data_1$Marital+inten_data_1$School)
summary(model_red2) # marital status and English are sig. Group and age are moderately significant



## Intention_3 by Condition - ANOVA
iscamsummary(inten_data_1$Intention_3, inten_data_1$condition)
boxplot(inten_data_1$Intention_3~inten_data_1$condition)
m5 <- aov(Intention_3~condition, data=inten_data_1)
m5
summary(m5)  # p < 0.05
## intention_3 including other predictors
# Full model -- not including interactions though
model_full3 = lm(inten_data_1$Intention_3~inten_data_1$condition+inten_data_1$Age+inten_data_1$Sex+inten_data_1$BornUS+inten_data_1$Engl+inten_data_1$Marital+inten_data_1$School)
summary(model_full3) # nothing is sig but condition (group) and Marital status, age is moderately sig
# model without most insignificant vars
model_red3 = lm(inten_data_1$Intention_3~inten_data_1$condition+inten_data_1$Age+inten_data_1$Engl+inten_data_1$Marital)
summary(model_red3) # condition, marital status, age and English are sig




## Intention_4 by Condition - ANOVA
iscamsummary(inten_data_1$Intention_4, inten_data_1$condition)
boxplot(inten_data_1$Intention_4~inten_data_1$condition)
m6 <- aov(Intention_4~condition, data=inten_data_1)
m6
summary(m6) # not sig. p > 0.40
## intention_4 including other predictors
# Full model -- not including interactions though
model_full4 = lm(inten_data_1$Intention_4~inten_data_1$condition+inten_data_1$Age+inten_data_1$Sex+inten_data_1$BornUS+inten_data_1$Engl+inten_data_1$Marital+inten_data_1$School)
summary(model_full4) # nothing is sig but marital status and English
# model without most insignificant vars
model_red4 = lm(inten_data_1$Intention_4~inten_data_1$condition+inten_data_1$Engl+inten_data_1$Marital)
summary(model_red4) # marital status and English are sig




##### adding variables that average VidRate, ActorRate, and PE across both videos
write.csv(total, "total_data.csv")

### overall ratings
iscamsummary(total$OverallRateVid)
hist(total$OverallActorRate)
boxplot(total$OverallActorRate)
 
##### COMPARE RATINGS BY CONDITION - 4 TREATMENT GROUPS #####

### exploring overall Video rating scores for each subject - using combined video rating averages
iscamsummary(total$OverallRateVid, total$condition)
boxplot(total$OverallRateVid~total$condition)
vid_model <- aov(OverallRateVid~condition, data=total)
vid_model
summary(vid_model) # very significant differences
TukeyHSD(vid_model, ordered = T)
plot(TukeyHSD(vid_model))
library(agricolae)
tukey_vid <- HSD.test(vid_model, "condition")
tukey_vid
tukey_vid$group # Group 4 had highest ratings, and significantly higher than groups 1 and 2. Group 3 had 2nd highest ratings, and only significantly different to group 2. Group 2 had extremely low ratings (p-val <0.000001 for every comparison)

# boxplot overall video rating
means <- tapply(total$OverallRateVid,total$condition,mean,na.rm=TRUE)
grand_mean <- mean(total$OverallRateVid,na.rm=TRUE)
ggplot(data=total, aes(x=condition, y=OverallRateVid, fill=condition)) + geom_boxplot() + xlab("Condition Group") + 
  ylab("Video Rating") +
  ggtitle("                       Boxplots of Video Rating by Condition") +theme_bw() + 
  geom_segment(aes(x=.64,y=means[1],xend=1.38,yend=means[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means[2],xend=2.3755,yend=means[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=2.63,y=means[3],xend=3.383,yend=means[3]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=3.65,y=means[4],xend=4.38,yend=means[4]),  colour="deeppink4", size=1.3) + 
  
  geom_segment(aes(x=0,y=grand_mean,xend=5,yend=grand_mean),colour="navyblue",show.legend=T)



### exploring overall Actor rating scores for each subject - using combined Actor rating averages
iscamsummary(total$OverallActorRate, total$condition)
boxplot(total$OverallActorRate~total$condition)
actor_model <- aov(OverallActorRate~condition, data=total)
actor_model
summary(actor_model) # significant differences (p-val = 0.007)
TukeyHSD(actor_model, ordered = T)
plot(TukeyHSD(actor_model))
tukey_actor <- HSD.test(actor_model, "condition")
tukey_actor
tukey_actor$group # Group 3 had highest ratings (Group 2 second highest), but both are only significantly higher than group 2.  Group 4 is not significantly different to any group. Group 2 had extremely low ratings (p-val <0.000001 for every comparison)

# boxplot overall actor rating
means2 <- tapply(total$OverallActorRate,total$condition,mean,na.rm=TRUE)
grand_mean2 <- mean(total$OverallActorRate,na.rm=TRUE)
ggplot(data=total, aes(x=condition, y=OverallActorRate, fill=condition)) + geom_boxplot() + xlab("Condition Group") + 
  ylab("Actor Rating") +
  ggtitle("                       Boxplots of Actor Rating by Condition") +theme_bw() + 
  geom_segment(aes(x=.64,y=means2[1],xend=1.38,yend=means2[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means2[2],xend=2.3755,yend=means2[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=2.63,y=means2[3],xend=3.383,yend=means2[3]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=3.65,y=means2[4],xend=4.38,yend=means2[4]),  colour="deeppink4", size=1.3) + 
  
  geom_segment(aes(x=0,y=grand_mean2,xend=5,yend=grand_mean2),colour="navyblue",show.legend=T)



### exploring overall PE rating scores for each subject - using combined PE rating averages
iscamsummary(total$OverallPE, total$condition)
boxplot(total$OverallPE~total$condition)
PE_model <- aov(OverallPE~condition, data=total)
PE_model
summary(PE_model) # significant differences (p-val = 0.0122)
TukeyHSD(PE_model)
plot(TukeyHSD(PE_model))
tukey_PE <- HSD.test(PE_model, "condition")
tukey_PE
tukey_PE$group # Only significant difference is Group 3 vs. Group 2 --> with Group 3 having higher actor ratings (p-val = 0.012)

# boxplot overall PE rating
means3 <- tapply(total$OverallPE,total$condition,mean,na.rm=TRUE)
grand_mean3 <- mean(total$OverallPE,na.rm=TRUE)
ggplot(data=total, aes(x=condition, y=OverallPE, fill=condition)) + geom_boxplot() + xlab("Condition Group") + 
  ylab("PE Ratings") +
  ggtitle("                       Boxplots of PE Rating by Condition") +theme_bw() + 
  geom_segment(aes(x=.64,y=means3[1],xend=1.38,yend=means3[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means3[2],xend=2.3755,yend=means3[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=2.63,y=means3[3],xend=3.383,yend=means3[3]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=3.65,y=means3[4],xend=4.38,yend=means3[4]),  colour="deeppink4", size=1.3) + 
  
  geom_segment(aes(x=0,y=grand_mean3,xend=5,yend=grand_mean3),colour="navyblue",show.legend=T)



##### COMPARE RATINGS BY Individual Video - 8 TREATMENT GROUPS #####

### exploring Video rating scores for each subject - using individual video rating averages
# I don't know how to compare the videos without using the 'clean' data with 2 rows per subject
iscamsummary(clean$RateVid, clean$Video)
boxplot(clean$RateVid~clean$Video)
vid_model_8 <- aov(RateVid~Video, data=clean)
vid_model_8
summary(vid_model_8) # very significant differences
TukeyHSD(vid_model_8)
plot(TukeyHSD(vid_model_8))
tukey_vid_8 <- HSD.test(vid_model_8, "Video")
tukey_vid_8
tukey_vid_8$group # Video 4.2 had highest ratings (Video 4.1 second highest), but both are only significantly higher than Video 2.1 and 2.2. Video 2.1 had extremely low ratings (p-val <0.000001 for every comparison)


# boxplot video rating
means_8 <- tapply(clean$RateVid,clean$Video,mean,na.rm=TRUE)
grand_mean_8 <- mean(clean$RateVid,na.rm=TRUE)
ggplot(data=clean, aes(x=Video, y=RateVid, fill=Video)) + geom_boxplot() + xlab("Video Group") + 
  ylab("Video Rating") +
  ggtitle("                       Boxplots of Video Rating between the 8 Videos") +theme_bw() + 
  geom_segment(aes(x=.64,y=means_8[1],xend=1.38,yend=means_8[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means_8[2],xend=2.3755,yend=means_8[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=2.63,y=means_8[3],xend=3.383,yend=means_8[3]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=3.65,y=means_8[4],xend=4.38,yend=means_8[4]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=4.66,y=means_8[5],xend=5.38,yend=means_8[5]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=5.622,y=means_8[6],xend=6.39,yend=means_8[6]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=6.65,y=means_8[7],xend=7.39,yend=means_8[7]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=7.63,y=means_8[8],xend=8.38,yend=means_8[8]),  colour="deeppink4", size=1.3) + 
  
  geom_segment(aes(x=0,y=grand_mean_8,xend=9,yend=grand_mean_8),colour="navyblue",show.legend=T)



### exploring Actor rating scores for each subject - using individual video Actor rating averages
iscamsummary(clean$ActorRate, clean$Video)
boxplot(clean$ActorRate~clean$Video)
actor_model_8 <- aov(ActorRate~Video, data=clean)
actor_model_8
summary(actor_model_8) # very significant differences (p-val < 0.0001)
TukeyHSD(actor_model_8)
plot(TukeyHSD(actor_model_8))
tukey_actor_8 <- HSD.test(actor_model_8, "Video")
tukey_actor_8
tukey_actor_8$group # Video 2.2 had significantly lower ratings than every other video expect for Video 4.2

# boxplot actor rating by video
means_8_2 <- tapply(clean$ActorRate,clean$Video,mean,na.rm=TRUE)
grand_mean_8_2 <- mean(clean$ActorRate,na.rm=TRUE)
ggplot(data=clean, aes(x=Video, y=ActorRate, fill=Video)) + geom_boxplot() + xlab("Video Group") + 
  ylab("Actor Rating") +
  ggtitle("                       Boxplots of Actor Rating by Video") +theme_bw() + 
  geom_segment(aes(x=.64,y=means_8_2[1],xend=1.38,yend=means_8_2[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means_8_2[2],xend=2.3755,yend=means_8_2[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=2.63,y=means_8_2[3],xend=3.383,yend=means_8_2[3]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=3.65,y=means_8_2[4],xend=4.38,yend=means_8_2[4]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=4.66,y=means_8_2[5],xend=5.38,yend=means_8_2[5]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=5.622,y=means_8_2[6],xend=6.39,yend=means_8_2[6]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=6.65,y=means_8_2[7],xend=7.39,yend=means_8_2[7]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=7.63,y=means_8_2[8],xend=8.38,yend=means_8_2[8]),  colour="deeppink4", size=1.3) + 
  
  geom_segment(aes(x=0,y=grand_mean_8_2,xend=9,yend=grand_mean_8_2),colour="navyblue",show.legend=T)



### exploring PE rating scores for each subject - using individual video PE rating averages
iscamsummary(clean$PEtotal, clean$Video)
boxplot(clean$PEtotal~clean$Video)
PE_model_8 <- aov(PEtotal~Video, data=clean)
PE_model_8
summary(PE_model_8) # significant differences (p-val = 0.0122)
TukeyHSD(PE_model_8)
plot(TukeyHSD(PE_model_8))
tukey_PE_8 <- HSD.test(PE_model_8, "Video")
tukey_PE_8$group # Video 3.2 had highest ratings (Video 3.1 second highest), but both are only significantly higher than Video 4.1 and 2.2. 

# boxplot PE rating
means_8_3 <- tapply(clean$PEtotal,clean$Video,mean,na.rm=TRUE)
grand_mean_8_3 <- mean(clean$PEtotal,na.rm=TRUE)
ggplot(data=clean, aes(x=Video, y=PEtotal, fill=Video)) + geom_boxplot() + xlab("Video Group") + 
  ylab("PE Ratings") +
  ggtitle("                       Boxplots of PE Rating by Video") +theme_bw() + 
  geom_segment(aes(x=.64,y=means_8_3[1],xend=1.38,yend=means_8_3[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means_8_3[2],xend=2.3755,yend=means_8_3[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=2.63,y=means_8_3[3],xend=3.383,yend=means_8_3[3]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=3.65,y=means_8_3[4],xend=4.38,yend=means_8_3[4]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=4.66,y=means_8_3[5],xend=5.38,yend=means_8_3[5]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=5.622,y=means_8_3[6],xend=6.39,yend=means_8_3[6]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=6.65,y=means_8_3[7],xend=7.39,yend=means_8_3[7]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=7.63,y=means_8_3[8],xend=8.38,yend=means_8_3[8]),  colour="deeppink4", size=1.3) + 
  
  geom_segment(aes(x=0,y=grand_mean_8_3,xend=9,yend=grand_mean_8_3),colour="navyblue",show.legend=T)


iscamsummary(first$RateVid, first$Video)
boxplot(first$RateVid~first$Video)
vid1_model <- aov(RateVid~Video, data=first)
vid1_model
summary(vid1_model)
TukeyHSD(vid1_model)
plot(TukeyHSD(vid1_model))
tukey_vid1 <- HSD.test(vid1_model, "Video")
tukey_vid1$group # Video 2.1 ratings significantly lower than videos 4.1, 3.1 and 1.1 

iscamsummary(total$OverallRateVid, total$Children)
boxplot(total$OverallRateVid~total$Children)
mChild <- aov(OverallRateVid~Children, data=total)
mChild
summary(mChild)




iscamsummary(first$RateVid, first$Video)
boxplot(first$RateVid~first$condition)
m2 <- aov(RateVid~Video, data=first)
m2
summary(m2)


iscamsummary(first$RateVid, first$Children)
boxplot(first$RateVid~first$Children)
mChild <- aov(RateVid~Children, data=first)
mChild
summary(mChild)

iscamsummary(first$PEfirst, first$Children)
boxplot(first$PEfirst~first$Children)
mChild3 <- aov(PEfirst~Children, data=first)
mChild3
summary(mChild3)


iscamsummary(first$ActorRate, first$Video)
boxplot(first$ActorRate~first$Video)
m4 <- aov(ActorRate~Video, data=first)
m4
summary(m4)

iscamsummary(first$ActorRate, first$condition)
boxplot(first$ActorRate~first$condition)
m5 <- aov(ActorRate~condition, data=first)
m5
summary(m5)


# Actor rating - first video for each subject 
iscamsummary(first$ActorRate)
hist(first$ActorRate)

# Full model (including age, parent, and interaction)
model_age_Child_Actor = lm(first$ActorRate~first$Age*first$Children)
summary(model_age_Child_Actor) # nothing is sig (every p > 0.5)

# No interaction
model1_actor = lm(first$ActorRate~first$Age+first$Children)
summary(model1_actor) # children var is not sig

# Only include age
model2_actor = lm(first$ActorRate~first$Age)
summary(model2_actor) # Age is super significant (p < 0.01)
plot(first$Age, first$ActorRate)
anova(model2_actor) 


# look at Children var only
first$Children <- as.character(first$Children)

model3_actor = lm(first$ActorRate~first$Children)
summary(model3_actor) # Age is super significant (p < 0.01)
plot(first$Children, first$ActorRate)
anova(model3_actor) 

means <- tapply(first$ActorRate,first$Children,mean,na.rm=TRUE)
grand_mean <- mean(first$ActorRate,na.rm=TRUE)
ggplot(data=first, aes(x=Children, y=ActorRate, fill=Children)) + geom_boxplot() + xlab("Parental Status") + 
  ylab("Actor Rating") +
  ggtitle("                 Boxplots of Actor Rating by Parental Status") +theme_bw() + 
  geom_segment(aes(x=.64,y=means[1],xend=1.38,yend=means[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means[2],xend=2.355,yend=means[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=0,y=grand_mean,xend=3,yend=grand_mean),colour="navyblue",show.legend=T)


# Video rating - first video for each subject 

iscamsummary(first$RateVid)
hist(first$RateVid)

# Full model (including age, parent, and interaction)
model_age_Child_vid = lm(first$RateVid~first$Age*first$Children)
summary(model_age_Child_vid) # nothing is sig (every p > 0.5)

# No interaction
model1_vid = lm(first$RateVid~first$Age+first$Children)
summary(model1_vid) # nothing is sig

# Only include age
model2_vid = lm(first$RateVid~first$Age)
summary(model2_vid) # Age not sig
plot(first$Age, first$RateVid)
anova(model2_vid) 


# look at Children var only

model3_vid = lm(first$RateVid~first$Children)
summary(model3_vid) # Children significant (p < 0.05)
plot(first$Children, first$RateVid)
anova(model3_vid) 

means <- tapply(first$RateVid,first$Children,mean,na.rm=TRUE)
grand_mean <- mean(first$RateVid,na.rm=TRUE)
ggplot(data=first, aes(x=Children, y=RateVid, fill=Children)) + geom_boxplot() + xlab("Parental Status") + 
  ylab("Video Rating") +
  ggtitle("                 Boxplots of Video Rating by Parental Status") +theme_bw() + 
  geom_segment(aes(x=.64,y=means[1],xend=1.38,yend=means[1]),  colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=1.63,y=means[2],xend=2.355,yend=means[2]), colour="deeppink4", size=1.3) + 
  geom_segment(aes(x=0,y=grand_mean,xend=3,yend=grand_mean),colour="navyblue",show.legend=T)





model1 = glm(Intention_1~Age, data = first, family=binomial)
summary(model1)
coef(model1)
anova(model1)

# do multiple regression for all 4 conditions
iscamsummary(first$Intention_1, first$condition)
model2 = lm(Intention_1~ condition, data = first)
summary(model2)
coef(model2)
anova(model2)
boxplot(first$Intention_1~first$condition)


# second video - intention1
iscamsummary(second$Intention_1, second$condition)
model2 = lm(Intention_1~ condition, data = second)
summary(model2)
coef(model2)
anova(model2)
boxplot(second$Intention_1~second$condition)


donner.fit2 = glm(Intention_1~Age+Marital, family=binomial, data=inten_data_1)

summary(donner.fit2)

coef(donner.fit2)

anova(donner.fit2)

write.csv(clean, "clean_data.csv")

write.csv(first, "first_data.csv")



iscamsummary(clean$RateVid, clean$Video)
boxplot(clean$RateVid~clean$Video)
m1 <- aov(RateVid~Video, data=clean)
m1
summary(m1)

iscamsummary(clean$RateVid, clean$condition)
boxplot(clean$RateVid~clean$condition)
m2 <- aov(RateVid~condition, data=clean)
m2
summary(m2)

iscamsummary(clean$RateVid, clean$Children)
boxplot(clean$RateVid~clean$Children)
mChild <- aov(RateVid~Children, data=clean)
mChild
summary(mChild)

iscamsummary(clean$RateVid, clean$Children)
boxplot(clean$RateVid~clean$Children)
mChild2 <- aov(ActorRate~Children, data=clean)
mChild2
summary(mChild2)

iscamsummary(clean$PEtotal, clean$Children)
boxplot(clean$PEtotal~clean$Children)
mChild3 <- aov(PEtotal~Children, data=clean)
mChild3
summary(mChild3)


iscamsummary(clean$ActorRate, clean$Video)
boxplot(clean$ActorRate~clean$Video)
m4 <- aov(ActorRate~Video, data=clean)
m4
summary(m4)

iscamsummary(clean$ActorRate, clean$condition)
boxplot(clean$ActorRate~clean$condition)
m5 <- aov(ActorRate~condition, data=clean)
m5
summary(m5)

iscamsummary(clean$ActorRate, clean$Children)
boxplot(clean$ActorRate~clean$Children)
m6 <- aov(ActorRate~Children, data=clean)
m6
summary(m6)

### Comparing Videos within each Condition Group #####
group1 <- clean[clean$condition == "Group1",] 
group2 <- clean[clean$condition == "Group2",] 
group3 <- clean[clean$condition == "Group3",] 
group4 <- clean[clean$condition == "Group4",] 


## Group 1
iscamsummary(group1$RateVid, group1$Video)

group_by(group1, Video) %>%
  summarise(
    count = n(),
    mean = mean(RateVid, na.rm = TRUE),
    sd = sd(RateVid, na.rm = TRUE)
)  
t.test(group1$RateVid ~ group1$Video, paired = T)
## p = 0.9999

library(ggpubr)

ggboxplot(group1, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 1",
 subtitle = "                                Personal Story of Young Person", legend = "right")







## Group 2
iscamsummary(group2$RateVid, group2$Video)

group_by(group2, Video) %>%
  summarise(
    count = n(),
    mean = mean(RateVid, na.rm = TRUE),
    sd = sd(RateVid, na.rm = TRUE)
  )  
t.test(group2$RateVid ~ group2$Video, paired = T)
## p = 0.0007


ggboxplot(group2, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 2",
          subtitle = "                                Personal Story of Older Adult", legend = "right")



## Group 3
iscamsummary(group3$RateVid, group3$Video)

group_by(group3, Video) %>%
  summarise(
    count = n(),
    mean = mean(RateVid, na.rm = TRUE),
    sd = sd(RateVid, na.rm = TRUE)
  )  
t.test(group3$RateVid ~ group3$Video, paired = T)
## p = 0.567


ggboxplot(group3, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 3",
          subtitle = "                                Story About Parent Living with HepB", legend = "right")



## Group 4
iscamsummary(group4$RateVid, group4$Video)

group_by(group4, Video) %>%
  summarise(
    count = n(),
    mean = mean(RateVid, na.rm = TRUE),
    sd = sd(RateVid, na.rm = TRUE)
  )  
t.test(group4$RateVid ~ group4$Video, paired = T)
## p = 0.117


ggboxplot(group4, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 4",
          subtitle = "                                General Facts About Hepatitis B", legend = "right")


##### Actor Rating within Groups
## Group 1
iscamsummary(group1$RateVid, group1$Video)

t.test(group1$RateVid ~ group1$Video, paired = T)
## p = 0.9999

library(ggpubr)

ggboxplot(group1, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 1",
          subtitle = "                                Personal Story of Young Person", legend = "right")







## Group 2
iscamsummary(group2$RateVid, group2$Video)

t.test(group2$RateVid ~ group2$Video, paired = T)
## p = 0.0007


ggboxplot(group2, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 2",
          subtitle = "                                Personal Story of Older Adult", legend = "right")



## Group 3
iscamsummary(group3$RateVid, group3$Video)

t.test(group3$RateVid ~ group3$Video, paired = T)
## p = 0.567


ggboxplot(group3, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 3",
          subtitle = "                                Story About Parent Living with HepB", legend = "right")



## Group 4
iscamsummary(group4$RateVid, group4$Video)


t.test(group4$RateVid ~ group4$Video, paired = T)
## p = 0.117


ggboxplot(group4, x="Video", y= "RateVid", color = "Video", palette = c("#00AFBB", "#E7B800"),
          ylab = "Video Ratings", title = "                   Video Ratings Within Group 4",
          subtitle = "                                General Facts About Hepatitis B", legend = "right")



